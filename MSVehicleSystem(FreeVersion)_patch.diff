diff --git a/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSSceneControllerFree.cs b/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSSceneControllerFree.cs
index 1833424..94c8f28 100644
--- a/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSSceneControllerFree.cs
+++ b/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSSceneControllerFree.cs
@@ -5,38 +5,39 @@ using UnityEngine.SceneManagement;
 using UnityEngine.UI;
 using System.Linq;
 using System;
+using UnityEngine.InputSystem;
 
 [Serializable]
 public class ControlsFree {
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_reloadScene_Input = true;
 	[Tooltip("The key that must be pressed to reload the current scene.")]
-	public KeyCode reloadScene = KeyCode.R;
+	public Key reloadScene = Key.R;
 
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_startTheVehicle_Input = true;
 	[Tooltip("The key that must be pressed to turn the vehicle engine on or off.")]
-	public KeyCode startTheVehicle = KeyCode.F;
+	public Key startTheVehicle = Key.F;
 
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_enterEndExit_Input = true;
 	[Tooltip("The key that must be pressed to enter or exit the vehicle.")]
-	public KeyCode enterEndExit = KeyCode.T;
+	public Key enterEndExit = Key.T;
 
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_handBrakeInput_Input = true;
 	[Tooltip("The key that must be pressed to activate or deactivate the vehicle hand brake.")]
-	public KeyCode handBrakeInput = KeyCode.Space;
+	public Key handBrakeInput = Key.Space;
 
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_switchingCameras_Input = true;
 	[Tooltip("The key that must be pressed to toggle between the cameras of the vehicle.")]
-	public KeyCode switchingCameras = KeyCode.C;
+	public Key switchingCameras = Key.C;
 
 	[Space(10)][Tooltip("If this variable is true, the control for this variable will be activated.")]
 	public bool enable_pause_Input = true;
 	[Tooltip("The key that must be pressed to pause the game.")]
-	public KeyCode pause = KeyCode.P;
+	public Key pause = Key.P;
 }
 
 public class MSSceneControllerFree : MonoBehaviour {
@@ -58,7 +59,7 @@ public class MSSceneControllerFree : MonoBehaviour {
 	public string _mouseScrollWheelInput = "Mouse ScrollWheel";
 	#endregion
 
-	public enum ControlTypeFree{windows, mobileButton};
+	public enum ControlTypeFree{windows, mobileButton, XRController};
 
 	[Space(10)][Tooltip("Here you can configure the vehicle controls, choose the desired inputs and also, deactivate the unwanted ones.")]
 	public ControlsFree controls;
@@ -66,7 +67,13 @@ public class MSSceneControllerFree : MonoBehaviour {
 	public GameObject[] vehicles;
 	[Space(10)][Tooltip("This variable is responsible for defining the vehicle in which the player will start. It represents an index of the 'vehicles' list, where the number placed here represents the index of the list. The selected index will be the starting vehicle.")]
 	public int startingVehicle = 0;
-	[Tooltip("The player must be associated with this variable. This variable should only be used if your scene also has a player other than a vehicle. This \"player\" will temporarily be disabled when you get in a vehicle, and will be activated again when you leave a vehicle.")]
+
+    internal void EnableControls(bool v)
+    {
+		_controlsEnabled = v;
+    }
+
+    [Tooltip("The player must be associated with this variable. This variable should only be used if your scene also has a player other than a vehicle. This \"player\" will temporarily be disabled when you get in a vehicle, and will be activated again when you leave a vehicle.")]
 	public GameObject player;
 	[Tooltip("If this variable is true and if you have a player associated with the 'player' variable, the game will start at the player. Otherwise, the game will start in the starting vehicle, selected in the variable 'startingVehicle'.")]
 	public bool startInPlayer = false;
@@ -76,6 +83,10 @@ public class MSSceneControllerFree : MonoBehaviour {
 	public float minDistance = 3;
 	[Space(10)][Tooltip("If this variable is true, useful data will appear on the screen, such as the car's current gear, speed, brakes, among other things.")]
 	public bool UIVisualizer = true;
+	[SerializeField]
+	bool enableControlsOnStart = true;
+
+	bool _controlsEnabled;
 
 	JoystickFree joystickCamera;
 	Button cameraMobileButton;
@@ -128,10 +139,25 @@ public class MSSceneControllerFree : MonoBehaviour {
 	bool playerIsNull;
 
 	Vector2 vectorDirJoystick;
+	Vector2 motion;
+
+	PlayerInputActions inputActions;
+	InputAction move;
+
+    [SerializeField]
+    internal InputManagement _input;
 
 	void Awake () {
+        if (GameManager.Instance != null)
+            inputActions = GameManager.Instance._playerInputActions;
+        else
+            inputActions = new PlayerInputActions();
+
+        move = inputActions.Player.Move;
+
+        _controlsEnabled = enableControlsOnStart;
 		error = false;
-		CheckEqualKeyCodes ();
+		CheckEqualKeys ();
 		MSSceneControllerFree[] sceneControllers = FindObjectsOfType(typeof(MSSceneControllerFree)) as MSSceneControllerFree[];
 		if (sceneControllers.Length > 1) {
 			Debug.LogError ("Only one controller is allowed per scene, otherwise the controllers would conflict with each other.");
@@ -224,8 +250,10 @@ public class MSSceneControllerFree : MonoBehaviour {
 				}
 			}
 			playerIsNull = false;
-			if (player) {
-				player.SetActive (false);
+			if (player)
+			{
+				if (selectControls != ControlTypeFree.XRController)
+					player.SetActive (false);
 			} else {
 				playerIsNull = true;
 			}
@@ -246,12 +274,23 @@ public class MSSceneControllerFree : MonoBehaviour {
 		}
 	}
 
-	void CheckEqualKeyCodes(){
+    private void OnEnable()
+    {
+		move.Enable();
+    }
+
+    private void OnDisable()
+    {
+        if (GameManager.Instance == null)
+            move.Disable();
+    }
+
+    void CheckEqualKeys(){
 		var type = typeof(ControlsFree);
 		var fields = type.GetFields();
 		var values = (from field in fields
-			where field.FieldType == typeof(KeyCode)
-			select (KeyCode)field.GetValue(controls)).ToArray();
+			where field.FieldType == typeof(Key)
+			select (Key)field.GetValue(controls)).ToArray();
 
 		foreach (var value in values) {
 			if (Array.FindAll (values, (a) => {
@@ -266,40 +305,85 @@ public class MSSceneControllerFree : MonoBehaviour {
 	void Update () {
 		if (!error) {
 			#region customizeInputsValues
-			switch (selectControls) {
-			case ControlTypeFree.mobileButton:
-				if(buttonLeft && buttonRight){
-					MSbuttonHorizontal = -buttonLeft.buttonInput+buttonRight.buttonInput;
-				}
-				if(buttonUp && buttonDown){
-					MSbuttonVertical = -buttonDown.buttonInput+ buttonUp.buttonInput;
-				}
-				if(joystickCamera){
-					mouseXInput = joystickCamera.joystickHorizontal;
-					mouseYInput = joystickCamera.joystickVertical;
+			if (_controlsEnabled)
+			{
+				switch (selectControls)
+				{
+					case ControlTypeFree.mobileButton:
+						if (buttonLeft && buttonRight)
+						{
+							MSbuttonHorizontal = -buttonLeft.buttonInput + buttonRight.buttonInput;
+						}
+						if (buttonUp && buttonDown)
+						{
+							MSbuttonVertical = -buttonDown.buttonInput + buttonUp.buttonInput;
+						}
+						if (joystickCamera)
+						{
+							mouseXInput = joystickCamera.joystickHorizontal;
+							mouseYInput = joystickCamera.joystickVertical;
+						}
+						verticalInput = MSbuttonVertical;
+						horizontalInput = MSbuttonHorizontal; 
+						var scroll = Mouse.current.scroll.ReadValue();
+                        mouseScrollWheelInput = scroll.y;
+						break;
+					case ControlTypeFree.windows:						
+						motion = move.ReadValue<Vector2>();
+                        verticalInput = motion.y;
+                        horizontalInput = motion.x;                        
+						var mousePosition = Mouse.current.position.ReadValue();
+						mouseXInput = mousePosition.x;
+						mouseYInput = mousePosition.y; 
+						scroll = Mouse.current.scroll.ReadValue();
+                        mouseScrollWheelInput = scroll.y;
+                        break;
+					case ControlTypeFree.XRController:
+						if (ExampleUtil.isPresent())
+						{
+							if (GameManager.Instance != null && GameManager.Instance._isLeftHanded)
+							{
+								verticalInput = _input.LeftAxis.y;
+								horizontalInput = _input.RightAxis.x;
+							}
+							else
+							{
+								verticalInput = _input.RightAxis.y;
+								horizontalInput = _input.LeftAxis.x;
+							}
+						}
+						else
+						{
+                            motion = move.ReadValue<Vector2>();
+                            verticalInput = motion.y;
+                            horizontalInput = motion.x;
+                            mousePosition = Mouse.current.position.ReadValue();
+                            mouseXInput = mousePosition.x;
+                            mouseYInput = mousePosition.y;
+                            scroll = Mouse.current.scroll.ReadValue();
+                            mouseScrollWheelInput = scroll.y;
+                        }
+						break;
 				}
-				verticalInput = MSbuttonVertical;
-				horizontalInput = MSbuttonHorizontal;
-				mouseScrollWheelInput = Input.GetAxis (_mouseScrollWheelInput);
-				break;
-			case ControlTypeFree.windows:
-				verticalInput = Input.GetAxis (_verticalInput);
-				horizontalInput = Input.GetAxis (_horizontalInput);
-				mouseXInput = Input.GetAxis (_mouseXInput);
-				mouseYInput = Input.GetAxis (_mouseYInput);
-				mouseScrollWheelInput = Input.GetAxis (_mouseScrollWheelInput);
-				break;
+			}
+			else
+            {
+				verticalInput = 0;
+				horizontalInput = 0;
+				mouseXInput = 0;
+				mouseYInput = 0;
+				mouseScrollWheelInput = 0;
 			}
 			#endregion
 
 			vehicleCode = vehicles [currentVehicle].GetComponent<MSVehicleControllerFree> ();
 			EnableOrDisableButtons (vehicleCode.isInsideTheCar);
 
-			if (Input.GetKeyDown (controls.reloadScene) && controls.enable_reloadScene_Input) {
+			if (Keyboard.current[controls.reloadScene].wasPressedThisFrame && controls.enable_reloadScene_Input) {
 				SceneManager.LoadScene (sceneName);
 			}
 
-			if (Input.GetKeyDown (controls.pause) && controls.enable_pause_Input) {
+			if (Keyboard.current[controls.pause].wasPressedThisFrame && controls.enable_pause_Input) {
 				pause = !pause;
 			}
 			if (pause) {
@@ -308,7 +392,7 @@ public class MSSceneControllerFree : MonoBehaviour {
 				Time.timeScale = Mathf.Lerp (Time.timeScale, 1.0f, Time.fixedDeltaTime * 5.0f);
 			}
 
-			if ((Input.GetKeyDown (controls.enterEndExit)||enterAndExitBool) && !blockedInteraction && player && controls.enable_enterEndExit_Input) {
+			if ((Keyboard.current[controls.enterEndExit].wasPressedThisFrame || enterAndExitBool) && !blockedInteraction && player && controls.enable_enterEndExit_Input) {
 				if (vehicles.Length <= 1) {
 					if (vehicleCode.isInsideTheCar) {
 						vehicleCode.ExitTheVehicle ();
@@ -418,7 +502,7 @@ public class MSSceneControllerFree : MonoBehaviour {
 					gearText.text = "Gear: " + vehicleCode.currentGear;
 					kmhText.text = "Velocity(km/h): " + (int)(vehicleCode.KMh * clampGear);
 					mphText.text = "Velocity(mp/h): " + (int)(vehicleCode.KMh * 0.621371f * clampGear);
-					handBrakeText.text = "HandBreak: " + vehicleCode.handBrakeTrue;
+					handBrakeText.text = "HandBrake: " + vehicleCode.handBrakeTrue;
 					pauseText.text = "Pause: " + pause;
 				}
 			}
diff --git a/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSVehicleControllerFree.cs b/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSVehicleControllerFree.cs
index ce31154..28a3e58 100644
--- a/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSVehicleControllerFree.cs
+++ b/UnityProject/Assets/MSVehicleSystem(FreeVersion)/Scripts/MSVehicleControllerFree.cs
@@ -5,6 +5,7 @@ using System.Collections.Generic;
 using System.Linq;
 using UnityEngine;
 using UnityEngine.UI;
+using UnityEngine.InputSystem;
 
 #region wheelClass
 [Serializable]
@@ -62,6 +63,9 @@ public class VehicleAdjustmentClassFree {
 	public GameObject volant;
 	[HideInInspector]
 	public AnimationCurve angle_x_Velocity = new AnimationCurve(new Keyframe(0, 1),new Keyframe(500, 0.8f));
+	[Tooltip("Allow to define how fast the vehicle will change direction")]
+	[Range(5f, 27f)]
+	public float rotationSpeedMultiplier = 27f;
 }
 [Serializable]
 public class StabilizeTurnsClassFree {
@@ -268,8 +272,11 @@ public class MSVehicleControllerFree : MonoBehaviour {
 	[Tooltip("In this variable, the 'SkidMarks' shader must be associated. Otherwise, the vehicle will not generate skid marks.")]
 	public Shader skidMarksShader;
 
-	#region inputs
-	float verticalInput = 0;
+    [SerializeField]
+    public bool handBrakeHold = false;
+
+    #region inputs
+    float verticalInput = 0;
 	float horizontalInput = 0;
 	float mouseXInput = 0;
 	float mouseYInput = 0;
@@ -772,10 +779,10 @@ public class MSVehicleControllerFree : MonoBehaviour {
 
 	void InputsCameras(){
 		if (isInsideTheCar && controls.controls.enable_switchingCameras_Input) {
-			if (Input.GetKeyDown (controls.controls.switchingCameras) && indexCamera < (_cameras.cameras.Length - 1)) {
+			if (Keyboard.current[controls.controls.switchingCameras].wasPressedThisFrame && indexCamera < (_cameras.cameras.Length - 1)) {
 				indexCamera++;
 				EnableCameras (indexCamera);
-			} else if (Input.GetKeyDown (controls.controls.switchingCameras) && indexCamera >= (_cameras.cameras.Length - 1)) {
+			} else if (Keyboard.current[controls.controls.switchingCameras].wasPressedThisFrame && indexCamera >= (_cameras.cameras.Length - 1)) {
 				indexCamera = 0;
 				EnableCameras (indexCamera);
 			}
@@ -1001,9 +1008,44 @@ public class MSVehicleControllerFree : MonoBehaviour {
 			engineInput = 0;
 		}
 		if (isInsideTheCar) {
-			if (Input.GetKeyDown (controls.controls.handBrakeInput) && controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f) {
-				handBrakeTrue = !handBrakeTrue;
-			}
+
+            switch(controls.selectControls)
+            {
+                case MSSceneControllerFree.ControlTypeFree.windows:
+					if (handBrakeHold)
+					{
+						if (controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f)
+						{
+							if (Keyboard.current[controls.controls.handBrakeInput].isPressed)
+								handBrakeTrue = true;
+							else
+								handBrakeHold = false;
+						}
+					}
+					else if (Keyboard.current[controls.controls.handBrakeInput].wasPressedThisFrame && controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f)
+					{
+						handBrakeTrue = !handBrakeTrue;
+					}
+                    break;
+                case MSSceneControllerFree.ControlTypeFree.XRController:
+					if (handBrakeHold)
+					{
+						if (controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f)
+						{
+							if ((ExampleUtil.isPresent() && (controls._input.IsRightGripped || controls._input.IsLeftGripped)) ||
+                                (!ExampleUtil.isPresent() && Keyboard.current[controls.controls.handBrakeInput].isPressed))
+                                    handBrakeTrue = true;
+							else
+								handBrakeTrue = false;
+                        }
+					}
+					else if ((ExampleUtil.isPresent() && (controls._input.IsRightGrippedDown || controls._input.IsLeftGrippedDown) && controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f) ||
+						!ExampleUtil.isPresent() && (Keyboard.current[controls.controls.handBrakeInput].wasPressedThisFrame && controls.controls.enable_handBrakeInput_Input && Time.timeScale > 0.2f))
+					{
+						handBrakeTrue = !handBrakeTrue;
+					}
+                    break;
+            }
 		}
 		//
 		DiscoverAverageRpm();
@@ -1549,7 +1591,7 @@ public class MSVehicleControllerFree : MonoBehaviour {
 	#region CoroutineStartEndTurnOff
 	void TurnOnAndTurnOff(){
 		if (youCanCall && isInsideTheCar && controls.controls.enable_startTheVehicle_Input) {
-			if ((Input.GetKeyDown (controls.controls.startTheVehicle) && !theEngineIsRunning) || (Mathf.Abs(verticalInput) > 0.5f && !theEngineIsRunning)) {
+			if ((Keyboard.current[controls.controls.startTheVehicle].wasPressedThisFrame && !theEngineIsRunning) || (Mathf.Abs(verticalInput) > 0.5f && !theEngineIsRunning)) {
 				enableEngineSound = true;
 				if (_sounds.engineSound) {
 					engineSoundAUD.pitch = 0.5f;
@@ -1557,7 +1599,7 @@ public class MSVehicleControllerFree : MonoBehaviour {
 				StartCoroutine ("StartEngineCoroutine", true);
 				StartCoroutine ("StartEngineTime");
 			}
-			if (Input.GetKeyDown (controls.controls.startTheVehicle) && theEngineIsRunning) {
+			if (Keyboard.current[controls.controls.startTheVehicle].wasPressedThisFrame && theEngineIsRunning) {
 				StartCoroutine ("StartEngineCoroutine", false);
 				StartCoroutine ("TurnOffEngineTime");
 			}
@@ -1708,7 +1750,7 @@ public class MSVehicleControllerFree : MonoBehaviour {
 	void Volant(){
 		angle1Ref = Mathf.MoveTowards(angle1Ref, horizontalInput, 2*Time.deltaTime);
 		angle2Volant = Mathf.MoveTowards(angle2Volant, horizontalInput, 2*Time.deltaTime);
-		maxAngleVolant = 27.0f * _vehicleSettings.angle_x_Velocity.Evaluate (KMh);
+		maxAngleVolant = /*27.0f*/_vehicleSettings.rotationSpeedMultiplier *_vehicleSettings.angle_x_Velocity.Evaluate (0.5f*KMh);
 		angleRefVolant = Mathf.Clamp (angle1Ref * maxAngleVolant, -maxAngleVolant, maxAngleVolant);
 
 		//APLICAR ANGULO NAS RODAS--------------------------------------------------------------------------------------------------------------
@@ -1792,7 +1834,7 @@ public class MSVehicleControllerFree : MonoBehaviour {
 		if (currentBrakeValue > 0.1f) {
 			return 0;
 		}
-		if (Input.GetKey (controls.controls.handBrakeInput)&& controls.controls.enable_handBrakeInput_Input) {
+		if (Keyboard.current[controls.controls.handBrakeInput].wasPressedThisFrame && controls.controls.enable_handBrakeInput_Input) {
 			return 0;
 		}
 		if (currentGear < 0) {
@@ -1887,7 +1929,7 @@ public class MSVehicleControllerFree : MonoBehaviour {
 		} else {
 			handBrake_Input = 0;
 		}
-		if (Input.GetKey (controls.controls.handBrakeInput) && controls.controls.enable_handBrakeInput_Input) {
+		if (Keyboard.current[controls.controls.handBrakeInput].wasPressedThisFrame && controls.controls.enable_handBrakeInput_Input) {
 			handBrake_Input = 2;
 		}
 		handBrake_Input = handBrake_Input * 1000;
